
test: (output expected) {
    output.is(expected).then('PASS' 'FAIL').print()
}

'Testing Simple Tables, Methods, and Assignment'.print()
chain1: (x) { x.+(2).is(3) }
chain2: (x) { x.+(2).*(3).sqrt() }
test(chain1(1) true)
test(chain1(2) false)
test(chain2(1) 3)

'\nTesting Multi-Argument Table Execution and Table Variable Storage'.print()
table: (x y){
    z: x.+(y)
    z.*(10)
}
test(table(5 5) 100)

'\nTesting Class Functionality'.print()
Point: (x y) {
    add: (p) { Point(x.+(p.x) y.+(p.y)) }
    distanceTo: (p) { 
        p.x.-(x).^(2).+(p.y.-(y).^(2)).sqrt() 
    }
}
p1: Point(0 0)
p2: p1.add(Point(1 1))
p1.distanceTo(p2)
test(p1.distanceTo(p2) 2.sqrt())

'\nRecursive Fibonacci Test'.print()
fib: (n a b) {
    n.>(0).then( (){ fib(n.-(1) a.+(b) a)} a )
}
test(fib( 10 1 0 ) 89)

'\nTesting past closure bugs'.print()
x: 5
y: () { x: 4 }
test(y.x 4)

j: (i) { i.*(2) }
test(2.*(j(5)) 20)

